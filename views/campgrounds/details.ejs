//SETUP PACKAGES
const express = require('express');
const mongoose = require('mongoose');
const app = express();
const path = require('path'); //makes sure 
const methodOverride = require('method-override');
const Campground = require('./models/campground');
const engine = require('ejs-mate');
const catchAsync = require('./utilities/catchAsync')
const expressError = require('./utilities/expressError.js')
const joi = require('joi')
const { campgroundSchema, reviewSchema } = require('./schemas.js')
const Review = require('./models/review')

mongoose.connect('mongodb://localhost:27017/yelp-camp');

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'There was an error connecting to the database.'))
db.once('open', () => {
    console.log('Successfully Connected to Database!')
})


app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(methodOverride('_method'))
app.engine('ejs', engine);
app.use(express.urlencoded({ extended: true }));
app.use(express.json());


const validateCampground = (req, res, next) => {
    const { error } = campgroundSchema.validate(req.body)
    if (error) {
        const msg = error.details.map(el => el.message).join(',')
        throw new expressError(msg, 400)
    } else {
        next();
    }
}

const validateReview = (req, res, next) => {
    const { error } = reviewSchema.validate(req.body)
    if (error) {
        const msg = error.details.map(el => el.message).join(',')
        throw new expressError(msg, 400)
    } else {
        next();
    }
}

app.listen(3000, () => {
    console.log('Listening on Port 3000...')
})


app.get('/', (req, res) => {
    res.render('home.ejs')
})


//CREATE NEW CAMPGROUND
app.get('/campgrounds/new', (req, res) => {
    res.render('campgrounds/new.ejs')
})

app.post('/campgrounds', validateCampground, catchAsync(async (req, res, next) => {
    // if (!req.body) throw new expressError('Invalid Campground Data', 400);
    const newCamp = new Campground(req.body);
    await newCamp.save()
    res.redirect(`/campgrounds/${newCamp._id}`)
}))

//CAMPGROUNDS INDEX
app.get('/campgrounds', catchAsync(async (req, res) => {
    const campgrounds = await Campground.find();
    res.render('campgrounds/index.ejs', { campgrounds })
}))

//DETAILS PAGE FOR SPECIFIC CAMPGROUNDS
app.get('/campgrounds/:id', catchAsync(async (req, res) => {
    const { id } = req.params;
    const camp = await Campground.findById(id).populate('reviews');
    console.log(camp)
    res.render('campgrounds/details.ejs', { id, camp });
}))

//EDIT CAMPGROUNDS
app.get('/campgrounds/:id/edit', catchAsync(async (req, res) => {
    const { id } = req.params;
    const camp = await Campground.findById(id);
    res.render('campgrounds/edit.ejs', { id, camp })
}))
app.put('/campgrounds/:id', validateCampground, catchAsync(async (req, res) => {
    const { id } = req.params;
    const newCamp = await Campground.findByIdAndUpdate(id, req.body);
    res.redirect(`/campgrounds/${newCamp._id}`)
}))
//DELETE CAMPGROUNDS
app.delete('/campgrounds/:id', catchAsync(async (req, res) => {
    const { id } = req.params;
    await Campground.findByIdAndDelete(id);
    res.redirect('/campgrounds')
}))

//REVIEWS
app.delete('/campgrounds/:id/reviews/:reviewId', catchAsync(async (req, res) => {
    const { reviewId, id } = req.params;
    await Campground.findByIdAndUpdate(id, { $pull: { reviews: reviewId } })
    await Review.findByIdAndDelete(reviewId);
    res.redirect(`/campgrounds/${id}`)
}))
app.post('/campgrounds/:id/reviews', catchAsync(async (req, res) => {
    const { id } = req.params;
    const camp = await Campground.findById(id)
    const review = new Review(req.body.review)
    camp.reviews.push(review);
    await review.save()
    await camp.save()
    res.redirect(`/campgrounds/${camp._id}`)
}))



app.all('*', (req, res, next) => {
    next(new expressError('Page Not Found', 404))
})

app.use((err, req, res, next) => {
    const { statusCode = 500, message = 'Oops, something went wrong!' } = err;
    if (!err.message) err.message = 'Oops, something went wrong!'
    res.status(statusCode).render('error.ejs', { err });
})

//IMAGE URL https://source.unsplash.com/collection/483251
